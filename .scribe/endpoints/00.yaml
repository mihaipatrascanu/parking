name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/user/register
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create new user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'User name.'
        required: true
        example: Mihai
        type: string
        custom: []
      email:
        name: email
        description: 'User email address.'
        required: true
        example: mihai@mihai.com
        type: string
        custom: []
      password:
        name: password
        description: 'User password.'
        required: true
        example: password
        type: string
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'User password_confirmation.'
        required: true
        example: password
        type: string
        custom: []
    cleanBodyParameters:
      name: Mihai
      email: mihai@mihai.com
      password: password
      password_confirmation: password
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/login
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Log a user into the app'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'User email address.'
        required: true
        example: mihai@mihai.com
        type: string
        custom: []
      password:
        name: password
        description: 'Users password.'
        required: true
        example: password
        type: string
        custom: []
    cleanBodyParameters:
      email: mihai@mihai.com
      password: password
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/parking
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all the info for a specific parking'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{parking_id}/spots'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all the spots available on the specific range'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      parking_id:
        name: parking_id
        description: 'The ID of the parking.'
        required: true
        example: 1
        type: integer
        custom: []
      start:
        name: start
        description: ''
        required: true
        example: '2022-12-01T00:00:00.000Z'
        type: string
        custom: []
      end:
        name: end
        description: ''
        required: true
        example: '2022-12-02T00:00:00.000Z'
        type: string
        custom: []
    cleanUrlParameters:
      parking_id: 1
      start: '2022-12-01T00:00:00.000Z'
      end: '2022-12-02T00:00:00.000Z'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      datetime_range:
        name: datetime_range
        description: ''
        required: false
        example: []
        type: object
        custom: []
      datetime_range.start:
        name: datetime_range.start
        description: 'Must be a valid date. Must be a date after or equal to <code>now</code>.'
        required: false
        example: '2065-11-25'
        type: string
        custom: []
      datetime_range.end:
        name: datetime_range.end
        description: 'Must be a valid date. Must be a date after <code>start</code>.'
        required: false
        example: '1987-04-24'
        type: string
        custom: []
    cleanBodyParameters:
      datetime_range:
        start: '2065-11-25'
        end: '1987-04-24'
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/{parking}/days'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get all the spots for a specific day'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      parking:
        name: parking
        description: ''
        required: true
        example: cupiditate
        type: string
        custom: []
      start:
        name: start
        description: ''
        required: true
        example: '2022-12-01T00:00:00.000Z'
        type: string
        custom: []
      end:
        name: end
        description: ''
        required: true
        example: '2022-12-02T00:00:00.000Z'
        type: string
        custom: []
    cleanUrlParameters:
      parking: cupiditate
      start: '2022-12-01T00:00:00.000Z'
      end: '2022-12-02T00:00:00.000Z'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/reservation
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create Reservation'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      start:
        name: start
        description: .
        required: true
        example: '2022-12-04T00:00:00.000Z'
        type: string
        custom: []
      end:
        name: end
        description: .
        required: true
        example: '2022-12-07T10:00:00.000Z'
        type: string
        custom: []
      spot_id:
        name: spot_id
        description: .
        required: true
        example: '3'
        type: string
        custom: []
      range:
        name: range
        description: ''
        required: false
        example: null
        type: string
        custom: []
    cleanBodyParameters:
      start: '2022-12-04T00:00:00.000Z'
      end: '2022-12-07T10:00:00.000Z'
      spot_id: '3'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/reservation/{reservation_id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Reservation'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      reservation_id:
        name: reservation_id
        description: 'The ID of the reservation.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      reservation_id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      start:
        name: start
        description: .
        required: true
        example: '2022-12-04T00:00:00.000Z'
        type: string
        custom: []
      end:
        name: end
        description: .
        required: true
        example: '2022-12-07T10:00:00.000Z'
        type: string
        custom: []
    cleanBodyParameters:
      start: '2022-12-04T00:00:00.000Z'
      end: '2022-12-07T10:00:00.000Z'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/reservation/{reservation_id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete Reservation'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      reservation_id:
        name: reservation_id
        description: 'The ID of the reservation.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      reservation_id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/logout
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Logout a user from the app'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
